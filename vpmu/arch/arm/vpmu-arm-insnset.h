#ifndef __VPMU_ARM_INSNSET_
#define __VPMU_ARM_INSNSET_

#define macro_str(str) #str

#define etype(x) ARM_INSTRUCTION_##x

#define ARM_INSTRUCTION \
    etype(B), \
    etype(BL), \
    etype(BLX), \
    etype(BX), \
    etype(BXJ), \
    etype(ADC), \
    etype(ADD), \
    etype(AND), \
    etype(BIC), \
    etype(CMN), \
    etype(CMP), \
    etype(EOR), \
    etype(MOV), \
    etype(MVN), \
    etype(ORR), \
    etype(RSB), \
    etype(RSC), \
    etype(SBC), \
    etype(SUB), \
    etype(TEQ), \
    etype(TST), \
    etype(MUL), \
    etype(MULS), \
    etype(MLA), \
    etype(MLAS), \
    etype(SMLAXY), \
    etype(SMLAL), \
    etype(SMLALS), \
    etype(SMLALXY), \
    etype(SMLAWY), \
    etype(SMUAD), \
    etype(SMUSD), \
    etype(SMLAD), \
    etype(SMLSD), \
    etype(SMLALD), \
    etype(SMLSLD), \
    etype(SMMLA), \
    etype(SMMLS), \
    etype(SMMUL), \
    etype(SMULXY), \
    etype(SMULL), \
    etype(SMULLS), \
    etype(SMULWY), \
    etype(UMAAL), \
    etype(UMLAL), \
    etype(UMLALS), \
    etype(UMULL), \
    etype(UMULLS), \
    etype(QADD), \
    etype(QDADD), \
    etype(QADD16), \
    etype(QADDSUBX), \
    etype(QSUBADDX), \
    etype(QSUB16), \
    etype(QADD8), \
    etype(QSUB8), \
    etype(QSUB), \
    etype(QDSUB), \
    etype(SADD16), \
    etype(SADDSUBX), \
    etype(SSUBADDX), \
    etype(SSUB16), \
    etype(SADD8), \
    etype(SSUB8), \
    etype(SHADD16), \
    etype(SHADDSUBX), \
    etype(SHSUBADDX), \
    etype(SHSUB16), \
    etype(SHADD8), \
    etype(SHSUB8), \
    etype(UADD16), \
    etype(UADDSUBX), \
    etype(USUBADDX), \
    etype(USUB16), \
    etype(UADD8), \
    etype(USUB8), \
    etype(UHADD16), \
    etype(UHADDSUBX), \
    etype(UHSUBADDX), \
    etype(UHSUB16), \
    etype(UHADD8), \
    etype(UHSUB8), \
    etype(UQADD16), \
    etype(UQADDSUBX), \
    etype(UQSUBADDX), \
    etype(UQSUB16), \
    etype(UQADD8), \
    etype(UQSUB8), \
    etype(SXTAB16), \
    etype(SXTAB), \
    etype(SXTAH), \
    etype(SXTB16), \
    etype(SXTB), \
    etype(SXTH), \
    etype(UXTAB16), \
    etype(UXTAB), \
    etype(UXTAH), \
    etype(UXTB16), \
    etype(UXTB), \
    etype(UXTH), \
    etype(CLZ), \
    etype(USAD8), \
    etype(USADA8), \
    etype(PKH), \
    etype(PKHBT), \
    etype(PKHTB), \
    etype(REV), \
    etype(REV16), \
    etype(REVSH), \
    etype(SEL), \
    etype(SSAT), \
    etype(SSAT16), \
    etype(USAT), \
    etype(USAT16), \
    etype(MRS), \
    etype(MSR), \
    etype(CPS), \
    etype(SETEND), \
    etype(LDR), \
    etype(LDRB), \
    etype(LDRBT), \
    etype(LDRD), \
    etype(LDREX), \
    etype(LDRH), \
    etype(LDRSB), \
    etype(LDRSH), \
    etype(LDRT), \
    etype(STR), \
    etype(STRB), \
    etype(STRBT), \
    etype(STRD), \
    etype(STREX), \
    etype(STRH), \
    etype(STRT), \
    etype(LDM1), \
    etype(LDM2), \
    etype(LDM3), \
    etype(STM1), \
    etype(STM2), \
    etype(SWP), \
    etype(SWPB), \
    etype(BKPT), \
    etype(SWI), \
    etype(CDP), \
    etype(LDC), \
    etype(MCR), \
    etype(MCRR), \
    etype(MRC), \
    etype(MRRC), \
    etype(STC), \
    etype(PLD), \
    etype(RFE), \
    etype(SRS), \
    etype(MCRR2), \
    etype(MRRC2), \
    etype(STC2), \
    etype(LDC2), \
    etype(CDP2), \
    etype(MCR2), \
    etype(MRC2), \
    etype(COPROCESSOR), \
    etype(NEON_DP), \
    etype(NEON_LS), \
    etype(CLREX), \
    etype(DSB), \
    etype(DMB), \
    etype(ISB), \
    etype(MOVW), \
    etype(MOVT), \
    etype(UNKNOWN), \
    etype(NOT_INSTRUMENTED), \
    etype(TOTAL_COUNT), \
    etype(VFP_COPROCESSOR), \
    etype(TOTAL_COUNTS)

typedef enum { ARM_INSTRUCTION } ARM_Instructions;
#undef etype

#ifdef CONFIG_VPMU_VFP
#define etype(x) ARM_VFP_INSTRUCTION_##x

#define ARM_VFP_INSTRUCTION \
    etype(FABSD), \
    etype(FABSS), \
    etype(FADDD), \
    etype(FADDS), \
    etype(FCMPD), \
    etype(FCMPS), \
    etype(FCMPED), \
    etype(FCMPES), \
    etype(FCMPEZD), \
    etype(FCMPEZS), \
    etype(FCMPZD), \
    etype(FCMPZS), \
    etype(FCPYD), \
    etype(FCPYS), \
    etype(FCVTDS), \
    etype(FCVTSD), \
    etype(FDIVD), \
    etype(FDIVS), \
    etype(FLDD), \
    etype(FLDS), \
    etype(FLDMD), \
    etype(FLDMS), \
    etype(FLDMX), \
    etype(FMACD), \
    etype(FMACS), \
    etype(FMDHR), \
    etype(FMDLR), \
    etype(FMDRR), \
    etype(FMRDH), \
    etype(FMRDL), \
    etype(FMRRD), \
    etype(FMRRS), \
    etype(FMRS), \
    etype(FMRX), \
    etype(FMSCD), \
    etype(FMSCS), \
    etype(FMSR), \
    etype(FMSRR), \
    etype(FMSTAT), \
    etype(FMULD), \
    etype(FMULS), \
    etype(FMXR), \
    etype(FNEGD), \
    etype(FNEGS), \
    etype(FNMACD), \
    etype(FNMACS), \
    etype(FNMSCD), \
    etype(FNMSCS), \
    etype(FNMULD), \
    etype(FNMULS), \
    etype(FSITOD), \
    etype(FSITOS), \
    etype(FSQRTD), \
    etype(FSQRTS), \
    etype(FSTD), \
    etype(FSTS), \
    etype(FSTMD), \
    etype(FSTMS), \
    etype(FSTMX), \
    etype(FSUBD), \
    etype(FSUBS), \
    etype(FTOSID), \
    etype(FTOSIS), \
    etype(FTOUID), \
    etype(FTOUIS), \
    etype(FTOUIZD), \
    etype(FTOUIZS), \
    etype(FTOUSIZD), \
    etype(FTOUSIZS), \
    etype(FUITOD), \
    etype(FUITOS), \
    etype(UNKNOWN), \
    etype(NOT_INSTRUMENTED), \
    etype(TOTAL_COUNT), \
    etype(TOTAL_COUNTS)

typedef enum { ARM_VFP_INSTRUCTION } ARM_VFP_Instructions;
#undef etype
#endif // CONFIG_VPMU_VFP

ARM_Instructions get_index_of_arm_insn(const char *s);
#ifdef CONFIG_VPMU_VFP
ARM_VFP_Instructions get_index_of_arm_vfp_insn(const char *s);
#endif // CONFIG_VPMU_VFP

#endif // End of __VPMU_INSNSET_
